module {
    foo = closure(x, y) {
        k = let %7 = (
            let %5 = (
                z
            ) in (
                let %6 = (
                    x
                ) in (
                    if eq(call_runtime(get_tag, [%5]), 3) {
                        @inject_from::<big>(
                            call_runtime(add, [@project_to::<big>(
                                %5
                            ), @project_to::<big>(
                                %6
                            )])
                        )
                    } else {
                        @inject_from::<int>(
                            add(@project_to::<int>(
                                %5
                            ), @project_to::<int>(
                                %6
                            ))
                        )
                    }
                )
            )
        ) in (
            let %8 = (
                y
            ) in (
                if eq(call_runtime(get_tag, [%7]), 3) {
                    @inject_from::<big>(
                        call_runtime(add, [@project_to::<big>(
                            %7
                        ), @project_to::<big>(
                            %8
                        )])
                    )
                } else {
                    @inject_from::<int>(
                        add(@project_to::<int>(
                            %7
                        ), @project_to::<int>(
                            %8
                        ))
                    )
                }
            )
        )
        return closure(g) {
            return neg(let %10 = (
                g
            ) in (
                let %11 = (
                    k
                ) in (
                    if eq(call_runtime(get_tag, [%10]), 3) {
                        @inject_from::<big>(
                            call_runtime(add, [@project_to::<big>(
                                %10
                            ), @project_to::<big>(
                                %11
                            )])
                        )
                    } else {
                        @inject_from::<int>(
                            add(@project_to::<int>(
                                %10
                            ), @project_to::<int>(
                                %11
                            ))
                        )
                    }
                )
            ))
        }

    }

    v = if call_runtime(is_true, [call_func(foo, [call_func(input, []), call_func(input, [])])]) {
        100
    } else {
        33
    }
}
